/* eslint-disable */
// @generated by protoc-gen-es v0.0.1 with parameter "bootstrap_wkt=true,ts_nocheck=false"
// @generated from file google/protobuf/any.proto (package google.protobuf, syntax proto3)

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, JsonWriteOptions, MessageType, PartialMessage, PlainMessage} from "../../index.js";
import {Message, proto3} from "../../index.js";

/**
 * @generated from message google.protobuf.Any
 */
export class Any extends Message<Any> {

    /**
     * @generated from field: string type_url = 1;
     */
    typeUrl = "";

    /**
     * @generated from field: bytes value = 2;
     */
    value = new Uint8Array(0);

    constructor(data?: PartialMessage<Any>) {
        super();
        proto3.util.initPartial(data, this);
    }

    override toJson(options?: Partial<JsonWriteOptions>): JsonValue {
        if (this.typeUrl === "") {
            return {};
        }
        const typeName = this.typeUrlToName(this.typeUrl);
        const messageType = options?.typeRegistry?.findMessage(typeName);
        if (!messageType) {
            throw new Error(`cannot encode message google.protobuf.Any to JSON: "${this.typeUrl}" is not in the type registry`);
        }
        const message = messageType.fromBinary(this.value);
        let json = message.toJson(options);
        if (typeName.startsWith("google.protobuf.") || (json === null || Array.isArray(json) || typeof json !== "object")) {
            json = {value: json};
        }
        json["@type"] = this.typeUrl;
        return json;
    }

    override fromJson(json: JsonValue, options?: Partial<JsonReadOptions>): this {
        if (json === null || Array.isArray(json) || typeof json != "object") {
            throw new Error(`cannot decode message google.protobuf.Any from JSON: expected object but got ${json === null ? "null" : Array.isArray(json) ? "array" : typeof json}`);
        }
        const typeUrl = json["@type"];
        if (typeof typeUrl != "string" || typeUrl == "") {
            throw new Error(`cannot decode message google.protobuf.Any from JSON: "@type" is empty`);
        }
        const typeName = this.typeUrlToName(typeUrl), messageType = options?.typeRegistry?.findMessage(typeName);
        if (!messageType) {
            throw new Error(`cannot decode message google.protobuf.Any from JSON: ${typeUrl} is not in the type registry`);
        }
        let message;
        if (typeName.startsWith("google.protobuf.") &&  Object.prototype.hasOwnProperty.call(json, "value")) {
            message = messageType.fromJson(json["value"], options);
        } else {
            const copy = Object.assign({}, json);
            delete copy["@type"];
            message = messageType.fromJson(copy, options);
        }
        this.packFrom(message);
        return this;
    }

    packFrom(message: Message): void {
        this.value = message.toBinary();
        this.typeUrl = this.typeNameToUrl(message.getType().typeName);
    }

    unpackTo(target: Message): boolean {
        if (!this.is(target.getType())) {
            return false;
        }
        target.fromBinary(this.value);
        return true;
    }

    is(type: MessageType): boolean {
        return this.typeUrl === this.typeNameToUrl(type.typeName);
    }

    private typeNameToUrl(name: string): string {
        return `type.googleapis.com/${name}`;
    }

    private typeUrlToName(url: string): string {
        if (!url.length) {
            throw new Error(`invalid type url: ${url}`);
        }
        const slash = url.lastIndexOf("/");
        const name = slash > 0 ? url.substring(slash + 1) : url;
        if (!name.length) {
            throw new Error(`invalid type url: ${url}`);
        }
        return name;
    }

    static readonly runtime = proto3;
    static readonly typeName = "google.protobuf.Any";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "type_url", kind: "scalar", T: 9 /* ScalarType.STRING */},
        {no: 2, name: "value", kind: "scalar", T: 12 /* ScalarType.BYTES */},
    ]);

    static pack(message: Message): Any {
        const any = new Any();
        any.packFrom(message);
        return any;
    }

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Any {
        return new Any().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Any {
        return new Any().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Any {
        return new Any().fromJsonString(jsonString, options);
    }

    static equals(a: Any | PlainMessage<Any> | undefined, b: Any | PlainMessage<Any> | undefined): boolean {
        return proto3.util.equals(Any, a, b);
    }

}


