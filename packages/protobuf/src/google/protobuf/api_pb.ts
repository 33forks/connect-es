/* eslint-disable */
// @generated by protoc-gen-es v0.0.1 with parameter "bootstrap_wkt=true,ts_nocheck=false"
// @generated from file google/protobuf/api.proto (package google.protobuf, syntax proto3)

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "../../index.js";
import {Message, proto3} from "../../index.js";
import {Option, Syntax} from "./type_pb.js";
import {SourceContext} from "./source_context_pb.js";

/**
 * @generated from message google.protobuf.Api
 */
export class Api extends Message<Api> {

    /**
     * @generated from field: string name = 1;
     */
    name = "";

    /**
     * @generated from field: repeated google.protobuf.Method methods = 2;
     */
    methods: Method[] = [];

    /**
     * @generated from field: repeated google.protobuf.Option options = 3;
     */
    options: Option[] = [];

    /**
     * @generated from field: string version = 4;
     */
    version = "";

    /**
     * @generated from field: google.protobuf.SourceContext source_context = 5;
     */
    sourceContext?: SourceContext;

    /**
     * @generated from field: repeated google.protobuf.Mixin mixins = 6;
     */
    mixins: Mixin[] = [];

    /**
     * @generated from field: google.protobuf.Syntax syntax = 7;
     */
    syntax = Syntax.PROTO2;

    constructor(data?: PartialMessage<Api>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "google.protobuf.Api";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */},
        {no: 2, name: "methods", kind: "message", T: Method, repeated: true},
        {no: 3, name: "options", kind: "message", T: Option, repeated: true},
        {no: 4, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */},
        {no: 5, name: "source_context", kind: "message", T: SourceContext},
        {no: 6, name: "mixins", kind: "message", T: Mixin, repeated: true},
        {no: 7, name: "syntax", kind: "enum", T: proto3.getEnumType(Syntax)},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Api {
        return new Api().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Api {
        return new Api().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Api {
        return new Api().fromJsonString(jsonString, options);
    }

    static equals(a: Api | PlainMessage<Api> | undefined, b: Api | PlainMessage<Api> | undefined): boolean {
        return proto3.util.equals(Api, a, b);
    }

}


/**
 * @generated from message google.protobuf.Method
 */
export class Method extends Message<Method> {

    /**
     * @generated from field: string name = 1;
     */
    name = "";

    /**
     * @generated from field: string request_type_url = 2;
     */
    requestTypeUrl = "";

    /**
     * @generated from field: bool request_streaming = 3;
     */
    requestStreaming = false;

    /**
     * @generated from field: string response_type_url = 4;
     */
    responseTypeUrl = "";

    /**
     * @generated from field: bool response_streaming = 5;
     */
    responseStreaming = false;

    /**
     * @generated from field: repeated google.protobuf.Option options = 6;
     */
    options: Option[] = [];

    /**
     * @generated from field: google.protobuf.Syntax syntax = 7;
     */
    syntax = Syntax.PROTO2;

    constructor(data?: PartialMessage<Method>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "google.protobuf.Method";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */},
        {no: 2, name: "request_type_url", kind: "scalar", T: 9 /* ScalarType.STRING */},
        {no: 3, name: "request_streaming", kind: "scalar", T: 8 /* ScalarType.BOOL */},
        {no: 4, name: "response_type_url", kind: "scalar", T: 9 /* ScalarType.STRING */},
        {no: 5, name: "response_streaming", kind: "scalar", T: 8 /* ScalarType.BOOL */},
        {no: 6, name: "options", kind: "message", T: Option, repeated: true},
        {no: 7, name: "syntax", kind: "enum", T: proto3.getEnumType(Syntax)},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Method {
        return new Method().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Method {
        return new Method().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Method {
        return new Method().fromJsonString(jsonString, options);
    }

    static equals(a: Method | PlainMessage<Method> | undefined, b: Method | PlainMessage<Method> | undefined): boolean {
        return proto3.util.equals(Method, a, b);
    }

}


/**
 * @generated from message google.protobuf.Mixin
 */
export class Mixin extends Message<Mixin> {

    /**
     * @generated from field: string name = 1;
     */
    name = "";

    /**
     * @generated from field: string root = 2;
     */
    root = "";

    constructor(data?: PartialMessage<Mixin>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "google.protobuf.Mixin";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */},
        {no: 2, name: "root", kind: "scalar", T: 9 /* ScalarType.STRING */},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Mixin {
        return new Mixin().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Mixin {
        return new Mixin().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Mixin {
        return new Mixin().fromJsonString(jsonString, options);
    }

    static equals(a: Mixin | PlainMessage<Mixin> | undefined, b: Mixin | PlainMessage<Mixin> | undefined): boolean {
        return proto3.util.equals(Mixin, a, b);
    }

}


