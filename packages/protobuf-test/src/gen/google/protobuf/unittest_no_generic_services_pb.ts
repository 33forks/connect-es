/* eslint-disable */
// @generated by protoc-gen-es v0.0.1 with parameter "ts_nocheck=false"
// @generated from file google/protobuf/unittest_no_generic_services.proto (package protobuf_unittest.no_generic_services_test, syntax proto2)

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto2} from "@bufbuild/protobuf";

/**
 * @generated from enum protobuf_unittest.no_generic_services_test.TestEnum
 */
export enum TestEnum {

    /**
     * @generated from enum value: FOO = 1;
     */
    FOO = 1,

}

// Retrieve enum metadata with: proto2.getEnumType(TestEnum)
proto2.util.setEnumType(TestEnum, "protobuf_unittest.no_generic_services_test.TestEnum", [
    {no: 1, name: "FOO"},
]);

/**
 * @generated from message protobuf_unittest.no_generic_services_test.TestMessage
 */
export class TestMessage extends Message<TestMessage> {

    /**
     * @generated from field: optional int32 a = 1;
     */
    a?: number;

    constructor(data?: PartialMessage<TestMessage>) {
        super();
        proto2.util.initPartial(data, this);
    }

    static readonly runtime = proto2;
    static readonly typeName = "protobuf_unittest.no_generic_services_test.TestMessage";
    static readonly fields: FieldList = proto2.util.newFieldList(() => [
        {no: 1, name: "a", kind: "scalar", T: 5 /* ScalarType.INT32 */, opt: true},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TestMessage {
        return new TestMessage().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TestMessage {
        return new TestMessage().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TestMessage {
        return new TestMessage().fromJsonString(jsonString, options);
    }

    static equals(a: TestMessage | PlainMessage<TestMessage> | undefined, b: TestMessage | PlainMessage<TestMessage> | undefined): boolean {
        return proto2.util.equals(TestMessage, a, b);
    }

}




