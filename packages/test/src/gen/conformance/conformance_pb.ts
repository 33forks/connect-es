/* eslint-disable */
// @generated by protoc-gen-es v0.0.1 with parameter "ts_nocheck=false"
// @generated from file conformance/conformance.proto (package conformance, syntax proto3)

import type {BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage} from "@bufbuild/protobuf";
import {Message, proto3} from "@bufbuild/protobuf";

/**
 * @generated from enum conformance.WireFormat
 */
export enum WireFormat {

    /**
     * @generated from enum value: UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,

    /**
     * @generated from enum value: PROTOBUF = 1;
     */
    PROTOBUF = 1,

    /**
     * @generated from enum value: JSON = 2;
     */
    JSON = 2,

    /**
     * @generated from enum value: JSPB = 3;
     */
    JSPB = 3,

    /**
     * @generated from enum value: TEXT_FORMAT = 4;
     */
    TEXT_FORMAT = 4,

}

// Retrieve enum metadata with: proto3.getEnumType(WireFormat)
proto3.util.setEnumType(WireFormat, "conformance.WireFormat", [
    {no: 0, name: "UNSPECIFIED"},
    {no: 1, name: "PROTOBUF"},
    {no: 2, name: "JSON"},
    {no: 3, name: "JSPB"},
    {no: 4, name: "TEXT_FORMAT"},
]);

/**
 * @generated from enum conformance.TestCategory
 */
export enum TestCategory {

    /**
     * @generated from enum value: UNSPECIFIED_TEST = 0;
     */
    UNSPECIFIED_TEST = 0,

    /**
     * @generated from enum value: BINARY_TEST = 1;
     */
    BINARY_TEST = 1,

    /**
     * @generated from enum value: JSON_TEST = 2;
     */
    JSON_TEST = 2,

    /**
     * @generated from enum value: JSON_IGNORE_UNKNOWN_PARSING_TEST = 3;
     */
    JSON_IGNORE_UNKNOWN_PARSING_TEST = 3,

    /**
     * @generated from enum value: JSPB_TEST = 4;
     */
    JSPB_TEST = 4,

    /**
     * @generated from enum value: TEXT_FORMAT_TEST = 5;
     */
    TEXT_FORMAT_TEST = 5,

}

// Retrieve enum metadata with: proto3.getEnumType(TestCategory)
proto3.util.setEnumType(TestCategory, "conformance.TestCategory", [
    {no: 0, name: "UNSPECIFIED_TEST"},
    {no: 1, name: "BINARY_TEST"},
    {no: 2, name: "JSON_TEST"},
    {no: 3, name: "JSON_IGNORE_UNKNOWN_PARSING_TEST"},
    {no: 4, name: "JSPB_TEST"},
    {no: 5, name: "TEXT_FORMAT_TEST"},
]);

/**
 * @generated from message conformance.FailureSet
 */
export class FailureSet extends Message<FailureSet> {

    /**
     * @generated from field: repeated string failure = 1;
     */
    failure: string[] = [];

    constructor(data?: PartialMessage<FailureSet>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "conformance.FailureSet";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "failure", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FailureSet {
        return new FailureSet().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FailureSet {
        return new FailureSet().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FailureSet {
        return new FailureSet().fromJsonString(jsonString, options);
    }

    static equals(a: FailureSet | PlainMessage<FailureSet> | undefined, b: FailureSet | PlainMessage<FailureSet> | undefined): boolean {
        return proto3.util.equals(FailureSet, a, b);
    }

}


/**
 * @generated from message conformance.ConformanceRequest
 */
export class ConformanceRequest extends Message<ConformanceRequest> {

    /**
     * @generated from protobuf oneof payload
     */
    payload: {
        case: "protobufPayload";
        /**
         * @generated from field: bytes protobuf_payload = 1;
         */
        value: Uint8Array;
    } | {
        case: "jsonPayload";
        /**
         * @generated from field: string json_payload = 2;
         */
        value: string;
    } | {
        case: "jspbPayload";
        /**
         * @generated from field: string jspb_payload = 7;
         */
        value: string;
    } | {
        case: "textPayload";
        /**
         * @generated from field: string text_payload = 8;
         */
        value: string;
    } | { case: undefined; value?: undefined } = { case: undefined };

    /**
     * @generated from field: conformance.WireFormat requested_output_format = 3;
     */
    requestedOutputFormat = WireFormat.UNSPECIFIED;

    /**
     * @generated from field: string message_type = 4;
     */
    messageType = "";

    /**
     * @generated from field: conformance.TestCategory test_category = 5;
     */
    testCategory = TestCategory.UNSPECIFIED_TEST;

    /**
     * @generated from field: conformance.JspbEncodingConfig jspb_encoding_options = 6;
     */
    jspbEncodingOptions?: JspbEncodingConfig;

    /**
     * @generated from field: bool print_unknown_fields = 9;
     */
    printUnknownFields = false;

    constructor(data?: PartialMessage<ConformanceRequest>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "conformance.ConformanceRequest";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "protobuf_payload", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "payload"},
        {no: 2, name: "json_payload", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "payload"},
        {no: 7, name: "jspb_payload", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "payload"},
        {no: 8, name: "text_payload", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "payload"},
        {no: 3, name: "requested_output_format", kind: "enum", T: proto3.getEnumType(WireFormat)},
        {no: 4, name: "message_type", kind: "scalar", T: 9 /* ScalarType.STRING */},
        {no: 5, name: "test_category", kind: "enum", T: proto3.getEnumType(TestCategory)},
        {no: 6, name: "jspb_encoding_options", kind: "message", T: JspbEncodingConfig},
        {no: 9, name: "print_unknown_fields", kind: "scalar", T: 8 /* ScalarType.BOOL */},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConformanceRequest {
        return new ConformanceRequest().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConformanceRequest {
        return new ConformanceRequest().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConformanceRequest {
        return new ConformanceRequest().fromJsonString(jsonString, options);
    }

    static equals(a: ConformanceRequest | PlainMessage<ConformanceRequest> | undefined, b: ConformanceRequest | PlainMessage<ConformanceRequest> | undefined): boolean {
        return proto3.util.equals(ConformanceRequest, a, b);
    }

}


/**
 * @generated from message conformance.ConformanceResponse
 */
export class ConformanceResponse extends Message<ConformanceResponse> {

    /**
     * @generated from protobuf oneof result
     */
    result: {
        case: "parseError";
        /**
         * @generated from field: string parse_error = 1;
         */
        value: string;
    } | {
        case: "serializeError";
        /**
         * @generated from field: string serialize_error = 6;
         */
        value: string;
    } | {
        case: "runtimeError";
        /**
         * @generated from field: string runtime_error = 2;
         */
        value: string;
    } | {
        case: "protobufPayload";
        /**
         * @generated from field: bytes protobuf_payload = 3;
         */
        value: Uint8Array;
    } | {
        case: "jsonPayload";
        /**
         * @generated from field: string json_payload = 4;
         */
        value: string;
    } | {
        case: "skipped";
        /**
         * @generated from field: string skipped = 5;
         */
        value: string;
    } | {
        case: "jspbPayload";
        /**
         * @generated from field: string jspb_payload = 7;
         */
        value: string;
    } | {
        case: "textPayload";
        /**
         * @generated from field: string text_payload = 8;
         */
        value: string;
    } | { case: undefined; value?: undefined } = { case: undefined };

    constructor(data?: PartialMessage<ConformanceResponse>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "conformance.ConformanceResponse";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "parse_error", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "result"},
        {no: 6, name: "serialize_error", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "result"},
        {no: 2, name: "runtime_error", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "result"},
        {no: 3, name: "protobuf_payload", kind: "scalar", T: 12 /* ScalarType.BYTES */, oneof: "result"},
        {no: 4, name: "json_payload", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "result"},
        {no: 5, name: "skipped", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "result"},
        {no: 7, name: "jspb_payload", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "result"},
        {no: 8, name: "text_payload", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "result"},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConformanceResponse {
        return new ConformanceResponse().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConformanceResponse {
        return new ConformanceResponse().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConformanceResponse {
        return new ConformanceResponse().fromJsonString(jsonString, options);
    }

    static equals(a: ConformanceResponse | PlainMessage<ConformanceResponse> | undefined, b: ConformanceResponse | PlainMessage<ConformanceResponse> | undefined): boolean {
        return proto3.util.equals(ConformanceResponse, a, b);
    }

}


/**
 * @generated from message conformance.JspbEncodingConfig
 */
export class JspbEncodingConfig extends Message<JspbEncodingConfig> {

    /**
     * @generated from field: bool use_jspb_array_any_format = 1;
     */
    useJspbArrayAnyFormat = false;

    constructor(data?: PartialMessage<JspbEncodingConfig>) {
        super();
        proto3.util.initPartial(data, this);
    }

    static readonly runtime = proto3;
    static readonly typeName = "conformance.JspbEncodingConfig";
    static readonly fields: FieldList = proto3.util.newFieldList(() => [
        {no: 1, name: "use_jspb_array_any_format", kind: "scalar", T: 8 /* ScalarType.BOOL */},
    ]);

    static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JspbEncodingConfig {
        return new JspbEncodingConfig().fromBinary(bytes, options);
    }

    static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JspbEncodingConfig {
        return new JspbEncodingConfig().fromJson(jsonValue, options);
    }

    static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JspbEncodingConfig {
        return new JspbEncodingConfig().fromJsonString(jsonString, options);
    }

    static equals(a: JspbEncodingConfig | PlainMessage<JspbEncodingConfig> | undefined, b: JspbEncodingConfig | PlainMessage<JspbEncodingConfig> | undefined): boolean {
        return proto3.util.equals(JspbEncodingConfig, a, b);
    }

}


